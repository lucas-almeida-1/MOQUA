const fs = require('fs');
const path = require('path');

// Corrected paths:
// __dirname is .../MOQUA/keys
// We need to go up one level to the project root for .env
// and up one level then into 'js' for the output.
const projectRoot = path.resolve(__dirname, '..');
const envFilePath = path.resolve(projectRoot, '.env');
const outputDir = path.resolve(projectRoot, 'js');
const outputFilePath = path.resolve(outputDir, 'env-config.js');

try {
    // Ensure output directory exists
    if (!fs.existsSync(outputDir)) {
        fs.mkdirSync(outputDir, { recursive: true });
    }

    if (!fs.existsSync(envFilePath)) {
        console.warn(`\n[generate-env-config] WARNING: .env file not found at ${envFilePath}`);
        console.warn(`[generate-env-config] Make sure to create it with your API keys.`);
        console.warn(`[generate-env-config] Creating an empty js/env-config.js as a fallback.\n`);
        fs.writeFileSync(outputFilePath, '// .env file not found, using fallback configurations from config.js\n');
        process.exit(0);
    }

    const envFileContent = fs.readFileSync(envFilePath, { encoding: 'utf8' });
    const envVariables = {};

    envFileContent.split('\n').forEach(line => {
        const trimmedLine = line.trim();
        if (trimmedLine && !trimmedLine.startsWith('#')) {
            const [key, ...valueParts] = trimmedLine.split('=');
            const value = valueParts.join('=').trim();
            // Remove surrounding quotes if present (handles single and double quotes)
            if ((value.startsWith("'") && value.endsWith("'")) || (value.startsWith('"') && value.endsWith('"'))) {
                envVariables[key.trim()] = value.slice(1, -1);
            } else {
                envVariables[key.trim()] = value;
            }
        }
    });

    let outputContent = `// This file is auto-generated by generate-env-config.js. DO NOT EDIT MANUALLY!\n`;
    outputContent += `// It reads values from your .env file and makes them available to the client-side application.\n\n`;

    if (envVariables.FIREBASE_CONFIG_JSON) {
        // Validate if FIREBASE_CONFIG_JSON is a parsable JSON
        try {
            const parsedConfig = JSON.parse(envVariables.FIREBASE_CONFIG_JSON); // Attempt to parse
            // Ensure it's not an empty object if parsed successfully
            if (Object.keys(parsedConfig).length === 0) {
                throw new Error("Parsed FIREBASE_CONFIG_JSON is an empty object.");
            }
            outputContent += `window.__firebase_config = '${envVariables.FIREBASE_CONFIG_JSON.replace(/'/g, "\\'")}';\n`;
        } catch (e) {
            console.error(`\n[generate-env-config] ERROR: FIREBASE_CONFIG_JSON in .env is not valid JSON or is empty.`);
            console.error(`[generate-env-config] Value: ${envVariables.FIREBASE_CONFIG_JSON}`);
            console.error(`[generate-env-config] Error details: ${e.message}`);
            console.error(`[generate-env-config] Please ensure it's a correctly formatted, non-empty JSON string (e.g., '{"apiKey":"...", ...}').`);
            console.error(`[generate-env-config] js/env-config.js will not contain __firebase_config.\n`);
        }
    } else {
        console.warn(`\n[generate-env-config] WARNING: FIREBASE_CONFIG_JSON not found in .env file.`);
        console.warn(`[generate-env-config] Firebase might not initialize correctly if not set elsewhere.\n`);
    }

    if (envVariables.GEMINI_API_KEY) {
        outputContent += `window.__gemini_api_key = '${envVariables.GEMINI_API_KEY.replace(/'/g, "\\'")}';\n`;
    } else {
        console.warn(`\n[generate-env-config] WARNING: GEMINI_API_KEY not found in .env file.`);
        console.warn(`[generate-env-config] Gemini AI features might not work.\n`);
    }
    
    if (envVariables.APP_ID) {
        outputContent += `window.__app_id = '${envVariables.APP_ID.replace(/'/g, "\\'")}';\n`;
    }
    if (envVariables.INITIAL_AUTH_TOKEN) {
        outputContent += `window.__initial_auth_token = '${envVariables.INITIAL_AUTH_TOKEN.replace(/'/g, "\\'")}';\n`;
    }

    fs.writeFileSync(outputFilePath, outputContent);
    console.log(`\n[generate-env-config] Successfully generated js/env-config.js from .env\n`);

} catch (error) {
    console.error(`\n[generate-env-config] Error generating js/env-config.js:`, error);
    // Create an empty or minimal fallback file so the app doesn't break on import
    fs.writeFileSync(outputFilePath, '// Error generating env-config.js. Using fallback configurations from config.js\n');
}
